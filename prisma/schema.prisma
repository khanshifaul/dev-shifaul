generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id        String   @id @default(cuid())
  name      String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([name])
  @@map("role")
}

model User {
  id               String      @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  twoFactorEnabled Boolean?
  username         String?
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  role             String?
  UserRole         UserRole?   @relation(fields: [role], references: [name], onDelete: Cascade)
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Message {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NewsletterSubscriber {
  id           String   @id @default(cuid())
  email        String
  subscribedAt DateTime @default(now())
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  thumbnail   String
  content     String
  tags        Tag[]     @relation("BlogPostTags")
  reactions   Int?
  published   Boolean
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_post")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  blogPosts BlogPost[] @relation("BlogPostTags")
  projects  Project[]  @relation("ProjectTags")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("tag")
}

model Project {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  subtitle     String?
  client       String?
  logo         String?
  services     String[]
  technologies String[]
  website      String
  thumbnail    String
  about        String
  goal         String
  execution    String
  results      String
  goalImages   String[]
  resultImages String[]
  tags         Tag[]    @relation("ProjectTags")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("project")
}
